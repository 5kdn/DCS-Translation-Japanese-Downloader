/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HealthGetResponse}
 */
// @ts-ignore
export function createHealthGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHealthGetResponse;
}
/**
 * The deserialization information for the current model
 * @param HealthGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHealthGetResponse(healthGetResponse: Partial<HealthGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "status": n => { healthGetResponse.status = n.getEnumValue<HealthGetResponse_status>(HealthGetResponse_statusObject); },
        "timestamp": n => { healthGetResponse.timestamp = n.getDateValue(); },
    }
}
export interface HealthGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The status property
     */
    status?: HealthGetResponse_status | null;
    /**
     * The timestamp property
     */
    timestamp?: Date | null;
}
export type HealthGetResponse_status = (typeof HealthGetResponse_statusObject)[keyof typeof HealthGetResponse_statusObject];
/**
 * Builds and executes requests for operations under /health
 */
export interface HealthRequestBuilder extends BaseRequestBuilder<HealthRequestBuilder> {
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<HealthGetResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<HealthGetResponse | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param HealthGetResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHealthGetResponse(writer: SerializationWriter, healthGetResponse: Partial<HealthGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!healthGetResponse || isSerializingDerivedType) { return; }
    writer.writeEnumValue<HealthGetResponse_status>("status", healthGetResponse.status);
    writer.writeDateValue("timestamp", healthGetResponse.timestamp);
    writer.writeAdditionalData(healthGetResponse.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const HealthRequestBuilderUriTemplate = "{+baseurl}/health";
export const HealthGetResponse_statusObject = {
    Ok: "ok",
} as const;
/**
 * Metadata for all the requests in the request builder.
 */
export const HealthRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: HealthRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        adapterMethodName: "send",
        responseBodyFactory:  createHealthGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
