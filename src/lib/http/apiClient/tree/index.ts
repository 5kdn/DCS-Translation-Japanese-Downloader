/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Tree400Error}
 */
// @ts-ignore
export function createTree400ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTree400Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Tree403Error}
 */
// @ts-ignore
export function createTree403ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTree403Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Tree422Error}
 */
// @ts-ignore
export function createTree422ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTree422Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Tree500Error}
 */
// @ts-ignore
export function createTree500ErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTree500Error;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TreeGetResponse_data}
 */
// @ts-ignore
export function createTreeGetResponse_dataFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTreeGetResponse_data;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TreeGetResponse}
 */
// @ts-ignore
export function createTreeGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTreeGetResponse;
}
/**
 * The deserialization information for the current model
 * @param Tree400Error The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTree400Error(tree400Error: Partial<Tree400Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "message": n => { tree400Error.messageEscaped = n.getStringValue(); },
        "success": n => { tree400Error.success = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param Tree403Error The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTree403Error(tree403Error: Partial<Tree403Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "message": n => { tree403Error.messageEscaped = n.getStringValue(); },
        "success": n => { tree403Error.success = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param Tree422Error The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTree422Error(tree422Error: Partial<Tree422Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "message": n => { tree422Error.messageEscaped = n.getStringValue(); },
        "success": n => { tree422Error.success = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param Tree500Error The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTree500Error(tree500Error: Partial<Tree500Error> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "message": n => { tree500Error.messageEscaped = n.getStringValue(); },
        "success": n => { tree500Error.success = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param TreeGetResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTreeGetResponse(treeGetResponse: Partial<TreeGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "data": n => { treeGetResponse.data = n.getCollectionOfObjectValues<TreeGetResponse_data>(createTreeGetResponse_dataFromDiscriminatorValue); },
        "message": n => { treeGetResponse.message = n.getStringValue(); },
        "success": n => { treeGetResponse.success = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param TreeGetResponse_data The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTreeGetResponse_data(treeGetResponse_data: Partial<TreeGetResponse_data> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "mode": n => { treeGetResponse_data.mode = n.getStringValue(); },
        "path": n => { treeGetResponse_data.path = n.getStringValue(); },
        "sha": n => { treeGetResponse_data.sha = n.getStringValue(); },
        "size": n => { treeGetResponse_data.size = n.getNumberValue(); },
        "type": n => { treeGetResponse_data.type = n.getEnumValue<TreeGetResponse_data_type>(TreeGetResponse_data_typeObject); },
        "url": n => { treeGetResponse_data.url = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param Tree400Error The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTree400Error(writer: SerializationWriter, tree400Error: Partial<Tree400Error> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!tree400Error || isSerializingDerivedType) { return; }
    writer.writeStringValue("message", tree400Error.messageEscaped);
    writer.writeBooleanValue("success", tree400Error.success);
    writer.writeAdditionalData(tree400Error.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param Tree403Error The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTree403Error(writer: SerializationWriter, tree403Error: Partial<Tree403Error> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!tree403Error || isSerializingDerivedType) { return; }
    writer.writeStringValue("message", tree403Error.messageEscaped);
    writer.writeBooleanValue("success", tree403Error.success);
    writer.writeAdditionalData(tree403Error.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param Tree422Error The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTree422Error(writer: SerializationWriter, tree422Error: Partial<Tree422Error> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!tree422Error || isSerializingDerivedType) { return; }
    writer.writeStringValue("message", tree422Error.messageEscaped);
    writer.writeBooleanValue("success", tree422Error.success);
    writer.writeAdditionalData(tree422Error.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param Tree500Error The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTree500Error(writer: SerializationWriter, tree500Error: Partial<Tree500Error> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!tree500Error || isSerializingDerivedType) { return; }
    writer.writeStringValue("message", tree500Error.messageEscaped);
    writer.writeBooleanValue("success", tree500Error.success);
    writer.writeAdditionalData(tree500Error.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param TreeGetResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTreeGetResponse(writer: SerializationWriter, treeGetResponse: Partial<TreeGetResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!treeGetResponse || isSerializingDerivedType) { return; }
    writer.writeCollectionOfObjectValues<TreeGetResponse_data>("data", treeGetResponse.data, serializeTreeGetResponse_data);
    writer.writeStringValue("message", treeGetResponse.message);
    writer.writeBooleanValue("success", treeGetResponse.success);
    writer.writeAdditionalData(treeGetResponse.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param TreeGetResponse_data The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTreeGetResponse_data(writer: SerializationWriter, treeGetResponse_data: Partial<TreeGetResponse_data> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!treeGetResponse_data || isSerializingDerivedType) { return; }
    writer.writeStringValue("mode", treeGetResponse_data.mode);
    writer.writeStringValue("path", treeGetResponse_data.path);
    writer.writeStringValue("sha", treeGetResponse_data.sha);
    writer.writeNumberValue("size", treeGetResponse_data.size);
    writer.writeEnumValue<TreeGetResponse_data_type>("type", treeGetResponse_data.type);
    writer.writeStringValue("url", treeGetResponse_data.url);
    writer.writeAdditionalData(treeGetResponse_data.additionalData);
}
export interface Tree400Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * The message property
     */
    messageEscaped?: string | null;
    /**
     * The success property
     */
    success?: boolean | null;
}
export interface Tree403Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * The message property
     */
    messageEscaped?: string | null;
    /**
     * The success property
     */
    success?: boolean | null;
}
export interface Tree422Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * The message property
     */
    messageEscaped?: string | null;
    /**
     * The success property
     */
    success?: boolean | null;
}
export interface Tree500Error extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * The message property
     */
    messageEscaped?: string | null;
    /**
     * The success property
     */
    success?: boolean | null;
}
export interface TreeGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * The data property
     */
    data?: TreeGetResponse_data[] | null;
    /**
     * The message property
     */
    message?: string | null;
    /**
     * The success property
     */
    success?: boolean | null;
}
export interface TreeGetResponse_data extends AdditionalDataHolder, Parsable {
    /**
     * The mode property
     */
    mode?: string | null;
    /**
     * The path property
     */
    path?: string | null;
    /**
     * The sha property
     */
    sha?: string | null;
    /**
     * The size property
     */
    size?: number | null;
    /**
     * The type property
     */
    type?: TreeGetResponse_data_type | null;
    /**
     * The url property
     */
    url?: string | null;
}
export type TreeGetResponse_data_type = (typeof TreeGetResponse_data_typeObject)[keyof typeof TreeGetResponse_data_typeObject];
/**
 * Builds and executes requests for operations under /tree
 */
export interface TreeRequestBuilder extends BaseRequestBuilder<TreeRequestBuilder> {
    /**
     * 指定された GitHub リポジトリのデフォルトブランチから、DCSWorld 配下のファイル一覧（TreeItem配列）を取得して返す。
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TreeGetResponse>}
     * @throws {Tree400Error} error when the service returns a 400 status code
     * @throws {Tree403Error} error when the service returns a 403 status code
     * @throws {Tree422Error} error when the service returns a 422 status code
     * @throws {Tree500Error} error when the service returns a 500 status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<TreeGetResponse | undefined>;
    /**
     * 指定された GitHub リポジトリのデフォルトブランチから、DCSWorld 配下のファイル一覧（TreeItem配列）を取得して返す。
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const TreeRequestBuilderUriTemplate = "{+baseurl}/tree";
export const TreeGetResponse_data_typeObject = {
    Blob: "blob",
} as const;
/**
 * Metadata for all the requests in the request builder.
 */
export const TreeRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: TreeRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            400: createTree400ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            403: createTree403ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            422: createTree422ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            500: createTree500ErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTreeGetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
